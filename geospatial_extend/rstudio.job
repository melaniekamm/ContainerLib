#!/bin/bash

# To launch an RStudio Server container, submit this job script with the command:
#    sbatch rstudio.job
# RStudio login information will go to the file $HOME/rstudio-%j.out (where %j is the SLURM job ID)

#SBATCH --time=12:00:00   # walltime limit (HH:MM:SS)
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=2
#SBATCH --partition=short    # standard node(s)
#SBATCH --signal=USR2
#SBATCH --output=/home/%u/rstudio-%j.out

#### USER-CUSTOMIZABLE OPTIONS

# R_LIBS_USER is the directory for user-installed R packages.
# If possible, specify a path in a project directory, as home directory quotas
# do not allow many packages to be installed
readonly R_LIBS_USER=${HOME}/R/rstudio/4.0
#readonly R_LIBS_USER=/project/my_project/my_subdir/R/rstudio/4.0

#### DON'T MODIFY BELOW HERE...

set -o errexit -o nounset

readonly singularity_image=/reference/containers/RStudio/4.0.5/rocker-geospatial.sif

mkdir -p -m 700 ${TMPDIR}/run ${TMPDIR}/tmp ${TMPDIR}/var/lib/rstudio-server

# Debian /usr/local/lib/R/etc/Renviron hard-codes R_LIBS_USER to /usr/local/lib/R/site-library :
# https://github.com/rocker-org/rocker-versioned/issues/153
# can override in /etc/R/Renviron.site
cat > ${TMPDIR}/database.conf <<END
provider=sqlite
directory=/var/lib/rstudio-server
END

# Set OMP_NUM_THREADS to prevent OpenBLAS (and any other OpenMP-enhanced
# libraries used by R) from spawning more threads than the number of processors
# allocated to the job.
#
# Set R_LIBS_USER to a path specific to rocker/rstudio to avoid conflicts with
# personal libraries from any R installation in the host environment

cat > ${TMPDIR}/rsession.sh <<END
#!/bin/sh
export OMP_NUM_THREADS=${SLURM_JOB_CPUS_PER_NODE}
export R_LIBS_USER=${HOME}/R/rocker-rstudio/4.0
exec rsession "\${@}"
END

chmod +x ${TMPDIR}/rsession.sh

export SINGULARITY_BIND="${TMPDIR}/run:/run,${TMPDIR}/tmp:/tmp,${TMPDIR}/database.conf:/etc/rstudio/database.conf,${TMPDIR}/rsession.sh:/etc/rstudio/rsession.sh,${TMPDIR}/var/lib/rstudio-server:/var/lib/rstudio-server"

# Do not suspend idle sessions.
# Alternative to setting session-timeout-minutes=0 in /etc/rstudio/rsession.conf
# https://github.com/rstudio/rstudio/blob/v1.4.1106/src/cpp/server/ServerSessionManager.cpp#L126
export SINGULARITYENV_RSTUDIO_SESSION_TIMEOUT=0


export SINGULARITYENV_USER=$(id -un)
export SINGULARITYENV_PASSWORD=$(openssl rand -base64 15)
# get unused socket per https://unix.stackexchange.com/a/132524
# tiny race condition between the python & singularity commands
readonly PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')
cat 1>&2 <<END
1. SSH tunnel from your workstation using the following command:

   ssh -N -L 8787:$(hostname -s)-eth.scinet.local:${PORT} ${SINGULARITYENV_USER}@ceres.scinet.usda.gov

   and point your web browser to http://localhost:8787

2. log in to RStudio Server using the following credentials:

   user: ${SINGULARITYENV_USER}
   password: ${SINGULARITYENV_PASSWORD}

When done using RStudio Server, terminate the job by:

1. Exit the RStudio Session ("power" button in the top right corner of the RStudio window)
2. Issue the following command on the login node:

      scancel -f ${SLURM_JOB_ID}
END

# Add any additional desired bind mounts (e.g., "--bind /KEEP") here.
singularity exec --cleanenv ${singularity_image} \
  rserver --www-port ${PORT} \
          --www-address $(hostname -s)-eth.scinet.local \
          --auth-none=0 \
          --auth-pam-helper-path=pam-helper \
          --auth-stay-signed-in-days=30 \
          --auth-timeout-minutes=0 \
          --rsession-path=/etc/rstudio/rsession.sh
printf 'rserver exited' 1>&2
